-2 задание-
import math
	 
	 
def main(z):
	    if z < -80:
	        final = 87 * z ** 6
	    elif z >= -80 and z < 19:
	        final = 99 * z + 85 * (62 * z + 46 + 43 * z ** 2) ** 5
	    else:
	        final = 44 * (math.log(z, 10) ** 6) - 90
	    return final


-3 задание------------ с суммой

import math
	 
	 
def main(m, n, b, z):
  f = 0.0
	for i in range(1, b + 1):
	  for j in range(1, n + 1):
	    for c in range(1, m + 1):
	      f = f + (26 * (j**3 + i**2 + 69 * c)**4 + z**3 / 91)
	return f

-----------------------------------
import math
from decimal import Decimal


def main(a, m):
    f = 0
    n = 0
    for j in range(1, m + 1):
        for c in range(1, a + 1):
            f = f + ((21 + (23 * c) ** 5) / 72 + j ** 3 / 97)
    for k in range(1, a + 1):
        n = n + 51 * math.exp(k)
    return f - n


print('%.2e' % Decimal(main(5, 4)))
------------------------------------------ с произведением-------------
import math


def main(a, m, b):
    result = 1
    for j in range(1, b):
        f = 0
        for i in range(1, m + 1):
            for k in range(1, a + 1):
                f = f + (81 * k ** 2 - (i ** 2 - 1 - i) ** 4 - j ** 3)
        result = result * f
    return result
-4 задание-
import math
	 
	 
def main(n):
    if n == 0:
        return -0.27
    if n == 1:
        return 0.77
    else:
        return math.sin(89 * main(n - 2) ** 2 + main(n - 1)**3)**3 - 1 - main(n - 1)
-5 задание-
from math import *


def main(z, x, y):
    n = len(z)
    f = 0
    for i in range(1, n + 1):
        f += pow(92 * z[n + 1 - (ceil(i / 4)) - 1] +
                 95 * pow(y[i - 1], 2) + pow(x[n + 1 - i - 1], 3), 2)
    return f
------------------------------------
import math


def main(z, y, x):
    f = 0.0
    for i in range(len(z)):
        f = f + ((x[i] ** 3 - 26 * z[int(i / 3)] - 2 * y[i] ** 2) ** 2)
    return 42 * f
------------------------------------
import math


def main(z, y, x):
    f = 0.0
    n = len(x)
    for i in range(1, n + 1):
        p1 = 19 * z[int(math.ceil(i / 3.0)) - 1] + x[n + 1 - i - 1] ** 2
        p2 = 10 * y[int(n + 1 - (math.ceil(i/4)) - 1)] **3
        f = f + (p1 + p2)**7
    return f
-----------------------------------
import math


def main(y, x, z):
    n = len(y)
    y.insert(0, 0)
    x.insert(0, 0)
    z.insert(0, 0)
    total = 0
    for i in range(1, n + 1):
        left = 2 * y[math.ceil(i / 2)]
        middle = 17 * x[n + 1 - math.ceil(i / 4)] ** 2
        right = 56 * z[math.ceil(i / 2)] ** 3
        total += 88 * (left + middle + right) ** 6
    return 69 * total
    
-6 задание-

def main(x):
	    p1 = {'source': x[4], 'DIFF': 0, 'LATTE': 1, 'OPAL': 2}
	    p2 = {'source': x[2], 'TEA': p1, 'TOML': 3, 'SCSS': 4}
	    p3 = {'source': x[1], 'XML': p2, 'YAML': 5}
	    p4 = {'source': x[1], 'XML': 7, 'YAML': 8}
	    p5 = {'source': x[3], 1981: 6, 2008: p4, 1999: 9}
	    p6 = {'source': x[0], 'QML': p3, 'EBNF': p5, 'CLICK': 10}
	    posit = p6
	    while not isinstance(posit, int):
	        posit = posit[posit['source']]
	    return posit
     
 -7 задание-
 
def main(input):
    a = (input & 0b00000000000000000000011111111111) << 15
    b = (input & 0b00000000000000000001100000000000) << 18
    c = (input & 0b00000000000000111110000000000000) >> 13
    d = (input & 0b00000111111111000000000000000000) >> 13
    e = (input & 0b00111000000000000000000000000000) >> 1
    f = (input & 0b01000000000000000000000000000000) << 1
    g = (input & 0b10000000000000000000000000000000) >> 17
    return a | b | c | d | e | f | g
    
-8 задание--------------словарь

text ="""do [ define reat_191 |>riage; ]. [ define rema_252 |> iner; ].[define arce |> arsove; ]. end"""
#                    value     key                 value    key

def main(text_str):
    text_list = text_str.split('.')
    text_list.pop(len(text_list)-1)

    _dict = {}
    for text in text_list:

        value = text[text.find('define')+6:text.find('|')]
        value = value.strip()

        key = text[text.find('>')+1:text.find(';')]
        key = key.strip()

        _dict[key] = value

    return _dict
======================================список
def main(text_str):
    text_list = text_str.split(';')
    text_list.pop(len(text_list)-1)

    _dict = {}
    for text in text_list:
        key = text[text.find('let')+3:text.find('<=')]
        key = key.strip()

        value = text[text.find('list(')+5:text.find(')')]
        value_list = value.split(',')

        _list = []
        for v in value_list:
            v = v.strip()
            _list.append(v)

        _dict[key] = _list

    return _dict
-----------------------------------------------------------replace
text = """<block><block> declare q(oninti_313) :=[ 'veus_80' , 'teesin', 'dira_86' ]</block>,<block>declare q(endi):= [ 'enxe', 'quma', 'leveri' ,'cema' ] </block>, <block>declare q(quti_20):= [
'xearza_619', 'tezate_652'] </block>, <block> declare q(zatibi_858) :=
[ 'arza' , 'aris' ] </block>, </block>"""
def main(text_str):
    text_list = text_str.split('</block>,')
    text_list.pop(len(text_list)-1)

    _dict = {}
    for text in text_list:
        key = text[text.find('q(')+2:text.find(')')]
        key = key.strip()

        value = text[text.find('[')+1:text.find(']')]
        value_list = value.split(',')

        _list = []
        for v in value_list:
            v = v.replace("'", "")
            v = v.strip()
            _list.append(v)

        _dict[key] = _list

    return _dict


print(main(text))
-9 задание-
    
from enum import Enum


class State(Enum):
    A = 0
    B = 1
    C = 2
    D = 3
    E = 4
    F = 5
    G = 6
    H = 7


class StateMachine:
    state = State.A

    def fork(self):
        return self.update({
            State.A: [State.B, 0],
            State.E: [State.G, 7],
            State.F: [State.G, 8],
            State.H: [State.B, 11],
        })

    def log(self):
        return self.update({
            State.A: [State.G, 1],
            State.B: [State.C, 2],
            State.D: [State.E, 4],
        })

    def peep(self):
        return self.update({
            State.C: [State.D, 3],
            State.D: [State.A, 5],
            State.E: [State.F, 6],
            State.G: [State.H, 10],
            State.F: [State.B, 9],
        })

    def update(self, transitions):
        self.state, signal = transitions[self.state]
        return signal


def main():
    return StateMachine()
